import kotlin.collections.List;

----------Tags Table----------------

CREATE TABLE TagEntity(
    id TEXT NOT NULL PRIMARY KEY UNIQUE,
    name TEXT NOT NULL,
    color INTEGER AS Int NOT NULL
);


getAllTags:
SELECT * FROM TagEntity;

getTagById:
SELECT * FROM TagEntity
WHERE id = :id;

upsertTag:
INSERT OR REPLACE INTO TagEntity(id, name, color)
VALUES(?,?,?);

deleteTag:
DELETE FROM TagEntity
WHERE id = :id;


----------Bookmarks Table----------------

CREATE TABLE BookmarkEntity(
    id TEXT NOT NULL PRIMARY KEY UNIQUE,
    url TEXT NOT NULL UNIQUE,
    createdAt INTEGER NOT NULL,
    lastReadAt INTEGER NOT NULL,
    isReviewed INTEGER AS Boolean DEFAULT 0 NOT NULL,
    notes TEXT NOT NULL DEFAULT "",
    mainImage TEXT NOT NULL DEFAULT "",
    title TEXT NOT NULL DEFAULT "",
    description TEXT NOT NULL DEFAULT "",
    siteName TEXT NOT NULL DEFAULT "",
    favIcon TEXT NOT NULL DEFAULT "",
    tagsIds TEXT AS List<String> NOT NULL
);

CREATE VIRTUAL TABLE BookmarkFTS USING fts4(
    id TEXT NOT NULL PRIMARY KEY UNIQUE,
    title TEXT NOT NULL DEFAULT "",
    description TEXT NOT NULL DEFAULT "",
    siteName TEXT NOT NULL DEFAULT "",
);

-- Triggers to keep the FTS index up to date.
CREATE TRIGGER InsertBookmarkFTS AFTER INSERT ON BookmarkEntity BEGIN
  INSERT OR REPLACE INTO BookmarkFTS(id, title,description,siteName)
  VALUES (new.id, new.title, new.description,new.siteName);
END;

CREATE TRIGGER DeleteBookmarkFTS AFTER DELETE ON BookmarkEntity BEGIN
  INSERT INTO BookmarkFTS(id, title,description,siteName) VALUES('delete', old.title, old.description, old.siteName);
END;

CREATE TRIGGER UpdateBookmarkFTS AFTER UPDATE ON BookmarkEntity BEGIN
  INSERT OR REPLACE INTO BookmarkFTS(id, title,description,siteName)
  VALUES (new.id, new.title, new.description,new.siteName);
END;

getBookmarks :
SELECT * FROM BookmarkEntity ;

getUntaggedBookmarks :
SELECT * FROM BookmarkEntity
WHERE tagsIds = ''
LIMIT :limit OFFSET :offset;


getBookmarksPaging :
SELECT * FROM BookmarkEntity
LIMIT :limit OFFSET :offset;

getRandomBookmarks :
SELECT * FROM BookmarkEntity
WHERE isReviewed == 0
ORDER BY RANDOM() LIMIT 10;

getRevisionBookmarks :
SELECT * FROM BookmarkEntity
WHERE isReviewed == 1
ORDER BY RANDOM() LIMIT 10;

getBookmarksByTagPaging :
SELECT * FROM BookmarkEntity
WHERE tagsIds LIKE :tagId
LIMIT :limit OFFSET :offset;

getBookmarksByLastReadPaging :
SELECT * FROM BookmarkEntity
ORDER BY lastReadAt DESC
LIMIT :limit OFFSET :offset;

searchUntaggedBookmarks :
SELECT * FROM BookmarkEntity
JOIN BookmarkFTS ON BookmarkEntity.id = BookmarkFTS.id
WHERE (tagsIds = '')
AND (BookmarkFTS MATCH :keyword)
LIMIT :limit OFFSET :offset;

searchAllBookmarkPaging :
SELECT * FROM BookmarkEntity
JOIN BookmarkFTS ON BookmarkEntity.id = BookmarkFTS.id
WHERE BookmarkFTS MATCH :keyword
LIMIT :limit OFFSET :offset;

searchBookmarkByTagPaging :
SELECT * FROM BookmarkEntity
JOIN BookmarkFTS ON BookmarkEntity.id = BookmarkFTS.id
WHERE (tagsIds LIKE :tagId)
AND (BookmarkFTS MATCH :keyword)
LIMIT :limit OFFSET :offset;

getBookmarksById :
SELECT * FROM BookmarkEntity
WHERE id = :id;

getBookmarksByUrl :
SELECT * FROM BookmarkEntity
WHERE url = :url;

upsertBookmark:
INSERT OR REPLACE INTO BookmarkEntity(id, url,createdAt,lastReadAt,isReviewed,notes,mainImage,title ,description ,siteName ,favIcon ,tagsIds)
VALUES(?,?,?,?,?,?,?,?,?,?,?,?);

deleteBookmark:
DELETE FROM BookmarkEntity
WHERE id = :id;
